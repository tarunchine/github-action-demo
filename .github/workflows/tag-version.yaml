name: Tag Version

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (eg: 2023.1.1)'
        required: true
        type: string
  pull_request:
    types:
      - closed
    paths:
      - 'CHANGELOG.md'

concurrency:
  group: tag-version
  cancel-in-progress: true

env:
  version: ""

jobs:
  get_version:
    name: Get Version
    runs-on: ubuntu-latest
    steps:
      - name: Get Version from pull request
        if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.title, 'Version 20')
        shell: bash
        run: |
          echo "version=$(echo "${{ github.event.pull_request.title }}" | cut -c 9-20)" >> $GITHUB_ENV

      - name: Get Version from Input
        if: github.event.inputs.version
        shell: bash
        run: |
          echo "version=${{ inputs.version }}" >> $GITHUB_ENV

      - name: echo Version
        id: getVersion
        run: |
          echo ${{ env.version }}
          echo "version=${{env.version}}" >> $GITHUB_OUTPUT

      - name: Check version format
        run: |
          if [[ ${{ env.version }} =~ ^20[0-9][0-9]\.[0-9]\.[1-9][0-9]*$ ]]; 
          then
            exit 0
          else
            exit 1
          fi
    outputs:
      version: ${{ steps.getVersion.outputs.version }}  

  tag_version:
    name: Tag Version
    runs-on: ubuntu-latest
    needs: get_version
    steps:
      - name: echo version from earlier step
        run: |
          echo ${{ needs.get_version.outputs.version }}
          echo "version=${{ needs.get_version.outputs.version }}" >> $GITHUB_ENV
      
      - name: echo Version
        id: getVersion
        run: |
          echo ${{ env.version }}

      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if tag already exist
        run: |
          if [ $(git tag -l "v${{ env.version }}") ]; then
            echo "Tag already exists!"
            exit 1
          else
            exit 0
          fi

      - name: Tag & Upload version commit
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a v${{ env.version }} -m "Version ${{ env.version }}"
          git push origin v${{ env.version }}

      - name: Extract release notes
        id: extract-release-notes
        uses: ffurrer2/extract-release-notes@v1
        with:
          changelog_file: CHANGELOG.md

      - name: Create a new release
        uses: ncipollo/release-action@v1
        with:
          body: ${{ steps.extract-release-notes.outputs.release_notes }}
          tag: 'v${{ env.version }}'
          name: "Release: ${{ env.version }}"
      
      - name: mark status success
        id: updateStatus
        run: |
          echo "status=success" >> $GITHUB_OUTPUT

    outputs:
      status: ${{ steps.updateStatus.outputs.status }}
      releaseNotes: ${{ steps.extract-release-notes.outputs.release_notes }}
  
  notify:
    name: Notify on team's channel
    runs-on: ubuntu-latest
    needs: [get_version, tag_version]
    if: ${{ always() }}
    steps:
      - name: echo inputs from earlier step
        run: |
          echo "version=${{ needs.get_version.outputs.version }}" >> $GITHUB_ENV
          echo "status=${{ needs.tag_version.outputs.status }}" >> $GITHUB_ENV

          if [[ "${{ needs.tag_version.outputs.releaseNotes }}" != "" ]]; 
          then
            echo "releaseNotes<<EOF" >> $GITHUB_ENV
            echo "${{ needs.tag_version.outputs.releaseNotes }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "releaseNotes=No Changelog Available" >> $GITHUB_ENV
          fi

      - name: echo env 
        id: getVersion
        run: |
          echo ${{ env.version }}
          echo ${{ env.status }}
          printf "%s\n" "${{ env.releaseNotes }}"

      - name: ðŸ“£ Send teams notification about release failure
        uses: simbo/msteams-message-card-action@latest
        if: ${{ env.status != 'success' }} 
        with:
          webhook: "https://jda365.webhook.office.com/webhookb2/6366d704-047d-47bf-89bb-9b4849f802f5@2ac36cee-0617-4ac0-bebf-e1ce5dfab86c/IncomingWebhook/9f2c380bd65a4ca88e2821f6e3ff52a5/336f29b9-14a6-4ca1-977b-9c7e4881a6ad"
          color: dc3545
          title: Released failed for version <h2>${{ env.version }}</h2>
          message: ${{ env.releaseNotes }}
          buttons: |
            View Repo ${{ github.server_url }}/${{ github.repository }}
            View Workflow ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: ðŸ“£ Send teams notification about new Release
        uses: simbo/msteams-message-card-action@latest
        if: ${{ env.status == 'success' }} 
        with:
          webhook: "https://jda365.webhook.office.com/webhookb2/6366d704-047d-47bf-89bb-9b4849f802f5@2ac36cee-0617-4ac0-bebf-e1ce5dfab86c/IncomingWebhook/9f2c380bd65a4ca88e2821f6e3ff52a5/336f29b9-14a6-4ca1-977b-9c7e4881a6ad"
          title: Version <h2>${{ env.version }}</h2> Released
          message: ${{ env.releaseNotes }}
          color: 28a745
          buttons: |
            View Repo ${{ github.server_url }}/${{ github.repository }}
            View Release logs ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{env.version}}
            View Workflow ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
